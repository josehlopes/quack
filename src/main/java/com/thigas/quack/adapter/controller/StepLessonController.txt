package com.thigas.quack.adapter.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.thigas.quack.adapter.dto.StepLessonDTO;
import com.thigas.quack.application.service.StepLessonService;

@RestController
@RequestMapping("/step-lessons")
public class StepLessonController {

    @Autowired
    private StepLessonService stepLessonService;

    @PostMapping
    public ResponseEntity<StepLessonDTO> create(@RequestBody StepLessonDTO stepLessonDTO) {
        StepLessonDTO createdStepLesson = stepLessonService.create(stepLessonDTO);
        return new ResponseEntity<>(createdStepLesson, HttpStatus.CREATED);
    }

    @GetMapping("/{id}")
    public ResponseEntity<StepLessonDTO> getById(@PathVariable Integer id) {
        return stepLessonService.getById(id)
                .map(stepLessonDTO -> new ResponseEntity<>(stepLessonDTO, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    @GetMapping
    public ResponseEntity<Iterable<StepLessonDTO>> getAll() {
        Iterable<StepLessonDTO> stepLessons = stepLessonService.getAll();
        return new ResponseEntity<>(stepLessons, HttpStatus.OK);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Void> update(@PathVariable Integer id, @RequestBody StepLessonDTO stepLessonDTO) {
        if (id.equals(stepLessonDTO.getId())) {
            stepLessonService.update(stepLessonDTO);
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } else {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable Integer id) {
        stepLessonService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
}
